<?php
// toolbrrestore_handler.php (Modified for conditional password handling and better error reporting)

header('Content-Type: application/json');

// 1. Include the connection handler to get credentials
require_once 'aadb_connect_handler.php';

// Check for file upload
if (empty($_FILES['restore_file'])) {
    http_response_code(400);
    echo json_encode(['success' => false, 'message' => 'No file uploaded.']);
    exit;
}

$file = $_FILES['restore_file'];

if ($file['error'] !== UPLOAD_ERR_OK) {
    http_response_code(500);
    echo json_encode(['success' => false, 'message' => 'File upload failed with error code ' . $file['error'] . '.']);
    exit;
}

// ===================================================================
// Path to the MySQL client executable (same as your original definition)
$mysql_path = 'E:/APPLICATIONS/XAMPP/mysql/bin/mysql.exe'; 
// ===================================================================

$temp_file = $file['tmp_name'];

// CRITICAL FIX 1: Build the password part of the command conditionally
$password_part = '';
if (!empty(DB_PASS)) {
    // Only include the -p flag if the password is NOT empty
    // -p without a space is required for the password argument in mysql
    $password_part = '-p' . escapeshellarg(DB_PASS);
}

// 3. Construct the core mysql import command
$mysql_command = sprintf(
    // Command template: %s (path) -h%s -u%s %s (password_part) %s (db_name) < %s (temp_file)
    '%s -h%s -u%s %s %s < %s', 
    escapeshellarg($mysql_path),
    escapeshellarg(DB_HOST),
    escapeshellarg(DB_USER),
    $password_part, // Conditional password part
    escapeshellarg(DB_NAME),
    escapeshellarg($temp_file)
);

// 4. Wrap the command in 'cmd /c ""...' and redirect STDERR to STDOUT (2>&1) for robust execution on Windows
// This ensures that any error messages generated by the mysql client are captured in the $output array.
$command = 'cmd /c "' . $mysql_command . ' 2>&1"';

// 5. Execute the command
exec($command, $output, $worked);

// 6. Check the result and output a JSON response
if ($worked === 0) {
    echo json_encode(['success' => true, 'message' => 'Database successfully restored from ' . basename($file['name']) . '.']);
} else {
    http_response_code(500);
    $errorMessage = "Database restore failed (code: {$worked}).";
    
    // CRITICAL FIX 2: Include the captured shell output (if any) in the error message
    if (!empty($output)) {
        $errorMessage .= ' Details from MySQL: ' . implode(' | ', $output);
    }
    
    error_log("Restore failure details: " . $errorMessage);
    echo json_encode(['success' => false, 'message' => $errorMessage]);
}
?>